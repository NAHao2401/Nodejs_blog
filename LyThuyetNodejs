- Thư viện express: Dùng để tạo sever đối với web
- Thư viện nodemon: Dùng để reset lại trang với bất kì thay đổi nào của mã nguồn, thay vì phải chạy lại mã (Hoạt động giống với npm run dev)
- Thư viện morgan: Dùng để hiện thị lên console các require
- Template engine cho phép viết HTML động bằng cách chèn dữ liệu từ sever vào các file template. Phổ biến: Handlebars, Pug
- express.static: Static file là các file tĩnh như css, js, hình ảnh... được gửi trực tiếp cho client mà không qua xử lý
- Đối với việc lấy dữ liệu: + Khi dữ liệu được gửi qua query string (sau dấu ?). Ví dụ: /search?keyword=nodejs&page=2, cách lấy: req.query.keyword → "nodejs"
req.query.page → "2"
                            + Khi dữ liệu được gửi qua form (POST) hoặc JSON body. Ví dụ: POST /login với body { username: "admin" }, cách lấy: req.body.username → "admin"
                            + Khi dữ liệu nằm trong đường dẫn động (route params). Ví dụ: /courses/nodejs-basic nếu route là /courses/:slug, cách lấy: req.params.slug → "nodejs-basic"
- //Template engine
app.engine(
  "hbs",
  handlebars({
    extname: ".hbs",
    helpers: {
      sum: (a, b) => a + b,
    },
  })
);
    + aap.engine: Đăng ký một template engine mới cho Express.
    + "hbs": Đặt tên engine là hbs (Sau này bạn sẽ dùng đuôi .hbs cho file giao diện).
    + handlebars({...}): Đây là hàm khởi tạo expres-handlebars, nhận vào object cấu hình.
          + extname: ".hbs": Đặt phần mở rộng mặc định cho các file template là .hbs, nhờ đó, khi render bạn chỉ cần ghi res.render("home") thì Express sẽ tự hiểu là home.hbs
          + helpers: {sum: (a, b) => a + b}: Khai bóa helper tên là sum, bạn có thể sử dụng helper này nhưu một hàm
- app.use(express.urlencoded({extended: true})):
    + Mục đích: Là Middleware của Express dùng để xử lý dữ liệu form gửi từ client (qua phương thức POST, PUT...)
- app.use(express.json()):
    + Mục đích: là Middlleware của Express dùng để xử lý dữ liệu JSON gửi từ client
- express.Router():
    + Mục đích: Là một module định tuyến (mini-app) trong Express. 
                Giúp tách biệt các tuyến đường (routes) của ứng dụng ra nhiều file để dễ quản lý.
                Mộtx router có thể có middleware, routes và logic riêng.
- Thư viện prettier: Dùng để trình định dạng mã nguồn giúp code tuân theo một style thống nhất.
                     Tự động căn chỉnh khoảng trắng, xuống dòng, dấu phẩy, dấu nháy,... theo quy tắc cấu hình
- Thư viện lint-staged: Dùng để chạy script chỉ trên các file đã git staged (đã git add file đấy)
- Thư viện husky: Dùng để quản lý và chạy Git hooks ngay trong dự án
                  Cho phép chạy script tự động trước hoặc sau các sự kiện git.
- async: Biến một hàm thành bất đồng bộ và trả về Promise
- await: Chờ kết quả Promise trước khi chạy tiếp
- Thư viện mongoose: Giúp kết nối và làm việc với MongoDB bằng cách sử dụng Schema và Model.
- mongoose.Schema: Schema là bản thiết kế mô tả cấu trúc của document trong MongoDB
- mongoose.model(name, schema):
    + name = tên model
    + schema = cấu trúc dữ liệu đã định nghĩa trước đó
- Ví dụ và giải thích Promise:
    index(req, res, next) {
    Course.find({})
      .then((courses) => {
        res.render("home", { courses: mutipleMongooseToObject(courses) });
      })
      .catch(next);
  }
  + Khi gọi Course.find({})
    MongoDB bắt đầu xử lý yêu cấu
    Promise lúc này ở trạng thái Pending(chờ)
  + Nếu truy vấn thành công: Promise sẽ chuyển qua trạng thái fulfilled và sau đó nhảy vào .then(...)
  + Nếu truy vấn thất bại: Promise sẽ chuyển qua trạng thái rejected và sau đó nhảy vào .catch(...)
- Thư viện method-override: Là một middleware cho Express, giúp giả lập (override) method HTTP khác thông qua query, body hoặc header.
Lý do sử dụng là bởi From HTML chỉ hỗ trợ method là GET hoặc POST. Nhưng trong ứng dụng RESTful, bạn muốn (PUT, PATCH) hoặc xóa DELETE
- app.use(methodOverride("_method")): Ý nghĩa là "Nếu request có query string hoặc body tên _method, thì hãy dùng giá trị đó làm method mới cho request này!"
- .then(() => res.redirect("/me/stored/courses"))
    + res.redirect(url) là hàm của Express, khi được gọi sẽ gửi response về phía trình duyệt với lệnh chuyển hướng sáng url mới
- Thư viện slugify là một thư viện Node.js chuyên để biến một chuỗi văn bản "bình thường" thành dạng slug - thức là chuỗi ngắn gọn, thân thiện với URL, không dấu, không ký tự đặc biệt, thường viết thường và ngăn cách bằng dấu gạch ngang(-)
- this.constructor.exists({
    slug: candidate,
    _id: { $ne: this._id },
  })
    + this.constructor: this->Chính document đang xử lý(ví dụ một Course cụ thể).
                        this.constructor->Chính class model đã tạo ra document đó(ví dụ Course model).
                        => Nếu đang trong hook của CourseSchema thì this.contructor chính là mongoose.model('Course');
    + exists(...): Là một hàm tiện ích của Mongoose để kiểm tra nhanh có tồn tại ít nhất một document thỏa mãn điều kiện hay không.
    + Bộ lọc {slug: candidate, _id: { $ne: this._id }}: + slug: candidate-> tìm document có slug đúng bằng biến candidate.
                                                        + _id: {$ne: this._id}-> tìm document có _id khác với _id hiện tại